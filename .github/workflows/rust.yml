name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # vで始まるタグがプッシュされたときにトリガー
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux (x86_64)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: macOS (x86_64)
            os: macos-latest
            target: x86_64-apple-darwin
          - name: macOS (Apple Silicon)
            os: macos-latest
            target: aarch64-apple-darwin
          - name: Windows (x86_64)
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: Windows (ARM64)
            os: windows-latest
            target: aarch64-pc-windows-msvc

    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Get project version
        id: get_version
        run: echo "version=$(cargo pkgid | cut -d'#' -f2)" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-cargo-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy --target ${{ matrix.target }} -- -D warnings

      - name: Run tests
        if: "!contains(matrix.target, 'aarch64')"
        run: cargo test --target ${{ matrix.target }} --verbose

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Upload artifact (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: tauria-tsgen-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/tauria-tsgen

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: tauria-tsgen-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/tauria-tsgen.exe

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Prepare artifacts for release
        run: |
          mkdir -p release_artifacts
          cp artifacts/tauria-tsgen-x86_64-unknown-linux-gnu/tauria-tsgen tauria-tsgen-linux-x86_64
          zip release_artifacts/tauria-tsgen-linux-x86_64.zip tauria-tsgen-linux-x86_64

          cp artifacts/tauria-tsgen-x86_64-apple-darwin/tauria-tsgen tauria-tsgen-macos-x86_64
          zip release_artifacts/tauria-tsgen-macos-x86_64.zip tauria-tsgen-macos-x86_64

          cp artifacts/tauria-tsgen-aarch64-apple-darwin/tauria-tsgen tauria-tsgen-macos-aarch64
          zip release_artifacts/tauria-tsgen-macos-aarch64.zip tauria-tsgen-macos-aarch64

          cp artifacts/tauria-tsgen-x86_64-pc-windows-msvc/tauria-tsgen.exe tauria-tsgen-windows-x86_64.exe
          zip release_artifacts/tauria-tsgen-windows-x86_64.zip tauria-tsgen-windows-x86_64.exe

          cp artifacts/tauria-tsgen-aarch64-pc-windows-msvc/tauria-tsgen.exe tauria-tsgen-windows-aarch64.exe
          zip release_artifacts/tauria-tsgen-windows-aarch64.zip tauria-tsgen-windows-aarch64.exe

      - name: Get project version from tag
        id: get_version_from_tag
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            Automated release for version ${{ steps.get_version_from_tag.outputs.version }}
            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false
          files: |
            release_artifacts/tauria-tsgen-linux-x86_64.zip
            release_artifacts/tauria-tsgen-macos-x86_64.zip
            release_artifacts/tauria-tsgen-macos-aarch64.zip
            release_artifacts/tauria-tsgen-windows-x86_64.zip
            release_artifacts/tauria-tsgen-windows-aarch64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}